import { TypedArray } from '@webcrypto/tools';
/**
 * Default input data formats to be encrypted and stored.
 */
export declare type InputData = string | TypedArray;
/**
 * Configuration used to initialize the Crypto Storage.
 */
export interface CryptoStorageConfig {
    /**
     * Base key used to encrypt the stored data.
     */
    baseKey: InputData | CryptoKey;
    /**
     * Database name used to store the data.
     */
    dbName?: string;
    /**
     * Storage name used to store the data.
     */
    storeName?: string;
    /**
     * Custom salt used to encrypt the stored data.
     */
    salt?: TypedArray;
    /**
     * Custom iteration cycles to encrypt the stored data.
     */
    encryptIterations?: number;
}
/**
 * Crypto Storage service used to save and load local encrypted data using IndexedDB.
 */
export declare class CryptoStorage {
    /**
     * Default authenticity error message when the `CryptoStorage` were not able de decrypt the stored data.
     */
    static AuthenticityError: string;
    /**
     * Default error message when a crypto key were not given.
     */
    static CryptoKeyError: string;
    /**
     * @internal
     */
    private internalConfig;
    /**
     * Base constructor that receive all the configuration as an object.
     */
    constructor(config: CryptoStorageConfig);
    /**
     * Base constructor.
     * @param baseKey Base key used to encrypt the stored data.
     * @param dbName Database name used to store the data.
     * @param storeName Storage name used to store the data.
     * @param salt Custom salt used to encrypt the stored data.
     * @param encryptIterations Custom iteration cycles to encrypt the stored data.
     */
    constructor(baseKey: InputData | CryptoKey, dbName?: string, storeName?: string, salt?: TypedArray, encryptIterations?: number);
    /**
     * Loads and decrypt the stored data that match the given key.
     *
     * @param key The given key to find the data.
     * @returns Promise with the decrypted data that match the given key, or undefined if nothing was found.
     */
    get(key: InputData): Promise<string | undefined>;
    /**
     * Encrypt and save the given data and key.
     *
     * @param key The key to be encrypted and find the data in the future.
     * @param value The value to be encrypted and stored.
     * @returns Promise to know when the encrypt and store process was complete.
     */
    set(key: InputData, value: InputData): Promise<void>;
    /**
     * Erase all key and data stored at the current store and database, but keeping the structure.
     *
     * @returns Promise to know when the process was complete.
     */
    clear(): Promise<void>;
    /**
     * Completely close the database connection.
     *
     * @returns Promise to know when the process was complete.
     */
    close(): Promise<void>;
    /**
     * Delete individual data that match the given key.
     *
     * @param key The given key to find the data.
     * @returns Promise to know when the process was complete.
     */
    delete(key: InputData): Promise<void>;
    /**
     * Fully delete not only all the key and data stored at the current store and database,
     * but also deleting the whole store and database the structure.
     *
     * @returns Promise to know when the process was complete.
     */
    deleteDB(): Promise<void>;
}
